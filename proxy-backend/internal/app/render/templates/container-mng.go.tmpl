<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Container & Service Panel</title>
<style>
:root{
    --bg: #0f172a; --panel: #111827; --muted: #94a3b8; --text: #e5e7eb;
    --accent: #22d3ee; --accent-2: #60a5fa; --danger: #f87171; --ok: #34d399;
    --card: #0b1220; --border: #1f2937; --chip: #0ea5e9;
}
table th, table td { min-width: 140px; word-break: keep-all; white-space: nowrap; }
*{box-sizing:border-box;}
body{margin:0; background: linear-gradient(180deg,#0b1020,#0a0f1c 60%, #090f1a); color:var(--text); font:16px/1.5 ui-sans-serif, sans-serif;}
.container { max-width: 1400px; margin: 0 auto 0 0; padding: 24px; }
h1{font-size:24px;margin-bottom:16px;color:var(--accent);}
table{width:100%;border-collapse:separate;border-spacing:0 8px;}
th, td{padding:12px;text-align:left;}
th{color:#93c5fd;font-weight:700;font-size:13px;letter-spacing:.3px;}
tbody tr{background:var(--card);border:1px solid var(--border);}
tbody tr td:first-child{border-left:1px solid var(--border);border-top-left-radius:10px;border-bottom-left-radius:10px;}
tbody tr td:last-child{border-right:1px solid var(--border);border-top-right-radius:10px;border-bottom-left-radius:10px;}
button{padding:6px 12px;border-radius:8px;border:none;cursor:pointer;font-size:13px;transition:.15s ease;}
button.primary{background:linear-gradient(90deg,var(--accent),var(--accent-2));color:#06121f;}
button.danger{background:linear-gradient(90deg,var(--danger),#fbbf24);color:#0b0604;}
button.ghost{background:transparent;border:1px dashed #2b3a59;color:var(--text);}
.metrics{font-size:12px;color:var(--muted);}
.actions{display:flex;gap:24px;flex-wrap: nowrap;}
.toast{position:fixed;right:16px;bottom:16px;display:flex;flex-direction:column;gap:8px;z-index:50;}
.toast .t{background-color: var(--panel); border:1px solid var(--border); padding:10px 12px; border-radius:12px; box-shadow:0 12px 30px rgba(0,0,0,.35);}
.mono{font-family:ui-monospace, SFMono-Regular, Menlo, monospace;font-size:13px;}
.home-btn{margin-bottom:20px; padding:6px 12px; border-radius:8px; background: var(--accent); color:#06121f; text-decoration:none; display:inline-block;}
.debug{background:var(--card); padding:12px; border-radius:8px; margin:12px 0; border:1px solid var(--border);}
.debug pre{color:var(--muted); font-size:12px; white-space:pre-wrap;}
</style>
</head>
<body>
<div class="container">
    <h1>Container Manager</h1>
    <a href="/csplatform/home" class="home-btn">Return to Home Page</a>
    
    <div id="containers-debug" class="debug" style="display:none;">
        <strong>Debug - Containers Response:</strong>
        <pre id="containers-debug-content"></pre>
    </div>
    
    <table>
        <thead>
            <tr>
                <th>User</th>
                <th>Container Name</th>
                <th>Agent Host</th>
                <th>Created At</th>
                <th>Status</th>
                <th>Metrics</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="containers-body">
            <tr><td colspan="7" style="text-align:center; color:var(--muted);">Loading containers...</td></tr>
        </tbody>
    </table>

    <h1>Service Agents</h1>
    
    <div id="agents-debug" class="debug" style="display:none;">
        <strong>Debug - Agents Response:</strong>
        <pre id="agents-debug-content"></pre>
    </div>
    
    <table>
        <thead>
            <tr>
                <th>Instance ID</th>
                <th>Host</th>
                <th>Tags</th>
                <th>Metrics</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="agents-body">
            <tr><td colspan="5" style="text-align:center; color:var(--muted);">Loading agents...</td></tr>
        </tbody>
    </table>
    
    <button onclick="toggleDebug()" style="margin-top:20px;" class="ghost">Toggle Debug Info</button>
</div>

<script>
let debugMode = false;

function toggleDebug() {
    debugMode = !debugMode;
    document.getElementById('containers-debug').style.display = debugMode ? 'block' : 'none';
    document.getElementById('agents-debug').style.display = debugMode ? 'block' : 'none';
}

function safeId(str){
    if(!str) return "";
    return str.replace(/[:\/\.]/g,"-");
}

function showToast(msg){
    let host = document.getElementById('toast');
    if(!host){
        host = document.createElement('div');
        host.id='toast';
        host.className='toast';
        document.body.appendChild(host);
    }
    const div = document.createElement('div');
    div.className='t';
    div.textContent=msg;
    host.appendChild(div);
    setTimeout(()=>div.remove(),2200);
}

async function updateContainerStatus(containerName, username){
    try {
        const res = await fetch(`/api/v1/containers/is-running/${username}`);
        const data = await res.json();
        const elem=document.getElementById(`status-${safeId(containerName)}`);
        if(elem) elem.innerHTML = data.running ? `<span style="color:var(--ok);font-weight:600;">Running</span>` : `<span style="color:var(--danger);font-weight:600;">Stopped</span>`;
    } catch(err){
        const elem=document.getElementById(`status-${safeId(containerName)}`);
        if(elem) elem.innerHTML=`<span style="color:var(--danger)">Error</span>`;
        console.error('Status update error:', err);
    }
}

async function updateMetricsContainer(containerName, agentUrl){
    if(!containerName || !agentUrl) return;
    try {
        const res = await fetch(`/csplatform/containers/container/${containerName}/${encodeURIComponent(agentUrl)}/metrics`);
        if(!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        const data = await res.json();
        const elem=document.getElementById(`metrics-${safeId(containerName)}`);
        if(elem){
            elem.innerHTML=`CPU: ${data.cpu_percent}%, RAM: ${data.memory_usage}/${data.memory_limit}GB`;
        }
    } catch(err){
        const elem=document.getElementById(`metrics-${safeId(containerName)}`);
        if(elem) elem.innerHTML="Metrics unavailable";
        console.error('Container metrics error:', err);
    }
}

async function updateMetricsAgent(url){
    if(!url) return;
    try {
        const res = await fetch(`/csplatform/containers/agent/${encodeURIComponent(url)}/metrics`);
        if(!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        const data = await res.json();
        const elem=document.getElementById(`metrics-agent-${safeId(url)}`);
        if(elem){
            elem.innerHTML=`CPU: ${data.cpu_percent_str}, RAM: ${data.ram_percent_str}`;
        }
    } catch(err){
        const elem=document.getElementById(`metrics-agent-${safeId(url)}`);
        if(elem) elem.innerHTML="Metrics unavailable";
        console.error('Agent metrics error:', err);
    }
}

async function renderContainers(){
    try {
        const res = await fetch("/api/v1/containers");
        
        if(!res.ok) {
            throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        }
        
        const contentType = res.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            throw new Error('Response is not JSON');
        }
        
        const data = await res.json();
        
        // Debug info
        if(debugMode) {
            document.getElementById('containers-debug-content').textContent = JSON.stringify(data, null, 2);
        }
        
        const tbody = document.getElementById("containers-body");
        
        // Clear loading message
        tbody.innerHTML = '';
        
        // Handle different response structures
        let containers = data;
        if (data.containers) containers = data.containers;
        if (data.data) containers = data.data;
        
        if(!Array.isArray(containers)) {
            console.error('Expected array, got:', typeof containers, containers);
            tbody.innerHTML = '<tr><td colspan="7" style="text-align:center; color:var(--danger);">Invalid data format received</td></tr>';
            return;
        }
        
        if(containers.length === 0) {
            tbody.innerHTML = '<tr><td colspan="7" style="text-align:center; color:var(--muted);">No containers found</td></tr>';
            return;
        }

        containers.forEach((c, index) => {
            
            // Handle different field name variations
            const containerName = c.container_name
            const user = c.user;
            const agentHost = c.agent_host
            const createdAt = c.created_at
            
            const containerId = safeId(containerName);
            let tr = document.getElementById(`container-${containerId}`);
            if(!tr){
                tr = document.createElement("tr");
                tr.id = `container-${containerId}`;
                tbody.appendChild(tr);
                tr.innerHTML = `
                    <td>${user}</td>
                    <td>${containerName}</td>
                    <td>${agentHost}</td>
                    <td>${createdAt}</td>
                    <td class="status" id="status-${containerId}">Checking...</td>
                    <td class="metrics" id="metrics-${containerId}">Loading...</td>
                    <td class="actions">
                        <button class="primary container-btn" data-action="start" data-username="${user}" data-container="${containerName}">Start</button>
                        <button class="ghost container-btn" data-action="stop" data-username="${user}" data-container="${containerName}">Stop</button>
                        <button class="ghost container-btn" data-action="restart" data-username="${user}" data-container="${containerName}">Restart</button>
                        <button class="danger container-btn" data-action="delete" data-username="${user}" data-container="${containerName}">Remove</button>
                    </td>
                `;
            }
            
            // Update status and metrics
            updateContainerStatus(containerName, user);
            if(agentHost && agentHost !== '-') {
                updateMetricsContainer(containerName, agentHost);
            }
        });

        bindContainerActions();
    } catch(err){
        console.error('Error rendering containers:', err);
        const tbody = document.getElementById("containers-body");
        tbody.innerHTML = `<tr><td colspan="7" style="text-align:center; color:var(--danger);">Error loading containers: ${err.message}</td></tr>`;
        showToast(`Error loading containers: ${err.message}`);
    }
}

async function renderAgents(){
    try {
        const res = await fetch("/api/v1/agents");
        
        if(!res.ok) {
            throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        }
        
        const contentType = res.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            throw new Error('Response is not JSON');
        }
        
        const data = await res.json();
        
        // Debug info - her zaman güncelle
        document.getElementById('agents-debug-content').textContent = JSON.stringify(data, null, 2);
        
        const tbody = document.getElementById("agents-body");
        
        // Clear loading message
        tbody.innerHTML = '';
        
        // Tüm olası veri yapılarını kontrol et
        let agents = null;
        
        // Direkt array mi?
        if (Array.isArray(data)) {
            agents = data;
        }
        // Object içinde array var mı?
        else if (typeof data === 'object' && data !== null) {
            // Tüm key'leri kontrol et
            const possibleKeys = ['agents', 'data', 'services', 'items', 'results', 'list'];
            for (const key of possibleKeys) {
                if (Array.isArray(data[key])) {
                    agents = data[key];
                    break;
                }
            }
            
            if (!agents) {
                const allKeys = Object.keys(data);
                for (const key of allKeys) {
                    if (Array.isArray(data[key])) {
                        agents = data[key];
                        break;
                    }
                }
            }
        }
        
        if (!agents || !Array.isArray(agents)) {
            tbody.innerHTML = `
                <tr><td colspan="5" style="text-align:center; color:var(--danger);">
                    No active agents found<br>
                </td></tr>
            `;
            return;
        }
        
        
        if(agents.length === 0) {
            tbody.innerHTML = '<tr><td colspan="5" style="text-align:center; color:var(--muted);">No agents found</td></tr>';
            return;
        }

        agents.forEach((s, index) => {
            
            if (!s || typeof s !== 'object') {
                console.warn(`Skipping invalid agent at index ${index}:`, s);
                return;
            }
            
            const instanceID = s.instanceID
            const mainHostProto = s.mainHostProto
            const mainHost = s.mainHost
            
            
            if(!mainHost) {
                console.warn('No host found for agent:', s);
                // Host yoksa bile satırı ekle, boş host ile
                const agentId = safeId(instanceID);
                let tr = document.getElementById(`agent-${agentId}`);
                
                if(!tr){
                    tr = document.createElement("tr");
                    tr.id = `agent-${agentId}`;
                    tbody.appendChild(tr);

                    const tags = s.Tags || s.tags || {};
                    const tagsList = Object.entries(tags).map(([k,v])=>`<span class="mono">${k}: ${v}</span><br>`).join("") || 'No tags';
                    
                    tr.innerHTML = `
                        <td>${instanceID}</td>
                        <td><span style="color:var(--danger)">No host</span></td>
                        <td>${tagsList}</td>
                        <td class="metrics">Host unavailable</td>
                        <td class="actions">
                            <button class="danger agent-btn" data-instanceid="${instanceID}">Deregister</button>
                        </td>
                    `;
                }
                return;
            }
            
            const url = `${mainHostProto}://${mainHost}`;
            const agentId = safeId(url);
            let tr = document.getElementById(`agent-${agentId}`);
            
            if(!tr){
                tr = document.createElement("tr");
                tr.id = `agent-${agentId}`;
                tbody.appendChild(tr);

                const tags = s.Tags || s.tags || {};
                const tagsList = Object.entries(tags).map(([k,v])=>`<span class="mono">${k}: ${v}</span><br>`).join("") || 'No tags';
                
                tr.innerHTML = `
                    <td>${instanceID}</td>
                    <td>${url}</td>
                    <td>${tagsList}</td>
                    <td class="metrics" id="metrics-agent-${agentId}">Loading...</td>
                    <td class="actions">
                        <button class="danger agent-btn" data-instanceid="${instanceID}">Deregister</button>
                    </td>
                `;
            }

            updateMetricsAgent(url);
        });

        bindAgentActions();
        
    } catch(err) { 
        console.error('Error rendering agents:', err);
        const tbody = document.getElementById("agents-body");
        tbody.innerHTML = `<tr><td colspan="5" style="text-align:center; color:var(--danger);">Error loading agents: ${err.message}</td></tr>`;
        showToast(`Error loading agents: ${err.message}`);
    }
}

function bindContainerActions(){
    document.querySelectorAll(".container-btn").forEach(btn=>{
        btn.onclick=async ()=>{
            const action = btn.dataset.action;
            const username = btn.dataset.username;
            const containerName = btn.dataset.container;
            
            try{
                const res = await fetch(`/api/v1/containers/${action}/${username}`,{
                    method:"POST",
                    headers:{"Content-Type":"application/json"},
                    body:JSON.stringify({name:username})
                });
                
                if(!res.ok){ 
                    const errorData = await res.json(); 
                    throw new Error(errorData.error || `HTTP ${res.status}`);
                }
                
                const data=await res.json();
                showToast(data.message || `Container ${action} successful`);
                
                // Refresh data after action
                setTimeout(renderContainers, 1000);
            }catch(err){
                showToast(`Error: ${err.message}`);
            }
        };
    });
}

function bindAgentActions(){
    document.querySelectorAll(".agent-btn").forEach(btn=>{
        btn.onclick=async ()=>{
            const instanceID = btn.dataset.instanceid;
            try{
                const res = await fetch("/api/v1/discovery/deregister",{
                    method:"POST",
                    headers:{"Content-Type":"application/json"},
                    body:JSON.stringify({instanceID,serviceName:"container_service"})
                });
                
                if(!res.ok){ 
                    const errorData = await res.json(); 
                    throw new Error(errorData.error || `HTTP ${res.status}`);
                }
                
                const data=await res.json();
                showToast(data.message||"Deregistered successfully");
                
                setTimeout(renderAgents, 1000);
            }catch(err){
                showToast(`Error: ${err.message}`);
            }
        };
    });
}

// Init
window.onload = ()=>{
    renderContainers();
    renderAgents();
    
    setInterval(renderContainers, 10000);
    setInterval(renderAgents, 10000);
};
</script>
</body>
</html>